{"meta":{"title":"Newoahil's Blog","subtitle":"千言万语汇做一句Factos","description":"","author":"Newoahil","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"OS计算方法集合","slug":"OS计算方法集合","date":"2023-04-25T12:09:34.000Z","updated":"2023-04-25T14:40:31.749Z","comments":true,"path":"2023/04/25/OS计算方法集合/","link":"","permalink":"http://example.com/2023/04/25/OS%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/","excerpt":"","text":"多道编程时CPU利用率求法例题 假定我们有3个程序，每个程序花费80%的时间进行I/O，20%的时间使用CPU，每个程序启动时间和其需要使用进行计算的分钟数 如下，不考虑进程切换时间： 程序编号 启动时间 需要CPU时间（分钟） 1 &emsp;00:00 &emsp;3.5 2 &emsp;00:10 &emsp;2 3 &emsp;00:15 &emsp;1.5 请问，在多线程/进程环境下，系统的总响应时间为 解析0-10分钟的时候，只有一个进程1在运行。 单进程CPU占有率是20%，所以这10分钟内，进程1消耗了2分钟的CPU。进程2是0，进程3也是0 然后在10-15分钟内，有两个进程在运行（1和2），双进程的CPU利用率是36%， 所以，这五分钟内，CPU一共利用了1.8分钟，平均分给每个进程，是0.9分钟。 此时，进程1已经占用了CPU 2.9分钟，还需要0.6分钟，这时候有三个进程在运行，所有总的CPU时间需要1.8分钟。 三进程的CPU利用率是48.8%，所以总共需要1.8&#x2F;0.488&#x3D;3.69分钟。这时，**进程1已经3.5分钟的CPu利用时间利用完了**。 此时还剩下2和3号进程在运行。 2号进程还需要0.5分钟，所以0.5×2&#x2F;0.36&#x3D;2.78，此时2号进程的2分钟CPU时间也利用完了。 3号进程还需要0.4分钟的CPU利用时间。0.4&#x2F;0.2 &#x3D; 2 结论 根据本题的初始效率(CPU 20% I/O 80%) 只有一个进程的时候，CPU利用率肯定是20%。 两个进程的时候：CPu利用率是：20% + (1-20%)*20% = 36% 三个进程是：36% + (1-36%)*20% = 48.8%其它的依次类推。 保证不发生死锁例题1 系统中有4个并发进程，每个进程都需要2个A资源，则系统最少应提供（ ）个A资源才能保证不会发生死锁 解析1系统提供资源数 &#x3D; 1个A资源*4个进程+1个A资源 &#x3D; 5 例题2 系统有11台打印机和N个并发进程，每个进程请求3台打印机，为确保不发生死锁，N的值最大为（ ） 解析2打印机数 &#x3D; 2个打印机*N个进程 + 1 &#x3D; 11 N &#x3D; 5 结论 保证不发生死锁,即至少有一个进程能获得所有资源,即至少一个进程能获得2个A资源,其他进程获得一个A资源","categories":[{"name":"Operating-System-OS","slug":"Operating-System-OS","permalink":"http://example.com/categories/Operating-System-OS/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"代码高亮测试","slug":"代码高亮测试","date":"2023-04-24T12:42:02.000Z","updated":"2023-04-24T13:31:03.339Z","comments":true,"path":"2023/04/24/代码高亮测试/","link":"","permalink":"http://example.com/2023/04/24/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%B5%8B%E8%AF%95/","excerpt":"","text":"C++#include&lt;cstdio&gt; #include&lt;iostream&gt; #include&lt;algorithm&gt; const int maxn&#x3D;1050; const int maxm&#x3D;20000010; int h,n,v[maxn],w[maxn],f[maxm],maxx; int main() &#123; cin&gt;&gt;h&gt;&gt;n; memset(f,0x3f,sizeof(f)); f[0]&#x3D;0; for(int i&#x3D;1;i&lt;&#x3D;n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i],maxx&#x3D;max(v[i],maxx); for(int i&#x3D;1;i&lt;&#x3D;n;i++) &#123; for(int j&#x3D;v[i];j&lt;&#x3D;h+maxx;j++) f[j]&#x3D;min(f[j],f[j-v[i]]+w[i]); &#125; int ans&#x3D;inf; for(int i&#x3D;h;i&lt;&#x3D;h+maxx;i++) ans&#x3D;min(ans,f[i]); cout&lt;&lt;ans&lt;&lt;endl; return 0; &#125; Javaimport java.util.Scanner; public class Main &#123; public static void main(String[] args) &#123; Scanner sc &#x3D; new Scanner(System.in); double[][] M &#x3D; new double[12][12]; double sum &#x3D; 0, cnt &#x3D; 0; char C &#x3D; sc.next().charAt(0); for(int i &#x3D; 0; i &lt; 12; i++) for(int j &#x3D; 0; j &lt; 12; j++) &#123; M[i][j] &#x3D; sc.nextDouble(); if(i &lt; j &amp;&amp; i + j &gt; 11) &#123; sum +&#x3D; M[i][j]; cnt++; &#125; &#125; if(C &#x3D;&#x3D; &#39;M&#39;) sum &#x3D; sum &#x2F; cnt; System.out.printf(&quot;%.1f&quot;, sum); &#125; &#125; Javascriptconst smoothScrollToTop &#x3D; () &#x3D;&gt; &#123; let yTopValve &#x3D; (window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop); if (yTopValve &gt; 1) &#123; window.requestAnimationFrame(smoothScrollToTop); scrollTo(0, Math.floor(yTopValve * 0.85)); &#125; else &#123; scrollTo(0, 0); &#125; &#125;; setTimeout(() &#x3D;&gt; &#123; document.getElementById(&#39;scrollbutton&#39;).onclick &#x3D; smoothScrollToTop; &#125;, 0); Pythonimport requests import re import sys import os url &#x3D; &#39;https:&#x2F;&#x2F;twoshot.hgame.n3ko.co&#x2F;&#39; headers &#x3D; &#123; &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;, &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;71.0.3578.98 Safari&#x2F;537.36&#39;, &#125; p &#x3D; requests.get(url+&#39;random.php?times&#x3D;228&#39;, headers&#x3D;headers) randnum &#x3D; re.findall(r&#39;\\d*&#39;, p.text)[1:-2:2] firstnum &#x3D; randnum[0] lastnum &#x3D; randnum[227] content &#x3D; os.popen(&quot;python3 .&#x2F;reverse_mt_rand.py &quot; + firstnum+&#39; &#39;+lastnum+&#39; 0 0&#39;).read() q &#x3D; requests.post(url+&#39;&#x2F;verify.php&#39;, headers&#x3D;headers, data&#x3D;&#123;&#39;ans&#39;: content&#125;) print(q.text)","categories":[{"name":"Blog-Maintenance","slug":"Blog-Maintenance","permalink":"http://example.com/categories/Blog-Maintenance/"}],"tags":[{"name":"网页测试","slug":"网页测试","permalink":"http://example.com/tags/%E7%BD%91%E9%A1%B5%E6%B5%8B%E8%AF%95/"}]},{"title":"第二部分_进程管理Part2","slug":"第二部分-进程管理Part2","date":"2023-04-24T12:01:49.000Z","updated":"2023-04-25T14:40:44.229Z","comments":true,"path":"2023/04/24/第二部分-进程管理Part2/","link":"","permalink":"http://example.com/2023/04/24/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86Part2/","excerpt":"","text":"竞争条件与临界区 在操作系统中，临界区是 一段程序 一个正在访问临界资源的进程由于申请I/O操作而被阻塞时 可以允许其他进程抢占处理机，但不得进入该进程的临界区 访问不同临界资源的两个进程不要求必须互斥地进入临界区","categories":[{"name":"Operating-System-OS","slug":"Operating-System-OS","permalink":"http://example.com/categories/Operating-System-OS/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"第二部分_进程管理Part1","slug":"第二部分_进程管理Part1","date":"2023-04-24T12:00:09.000Z","updated":"2023-04-25T14:51:32.180Z","comments":true,"path":"2023/04/24/第二部分_进程管理Part1/","link":"","permalink":"http://example.com/2023/04/24/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86_%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86Part1/","excerpt":"","text":"进程概念 并发进程指 可同时执行的进程 当一个进程处于这样的状态时, 正等待输入一批数据 ,称为阻塞态 阻塞→运行 是不可能发生的 一个进程从运行态变为就绪态 必会引起进程切换 进程自身决定 从执行状态到阻塞状态 创建进程 父进程和子进程可以并发执行 当进程采用操作fork()创建新的进程时，父进程和子进程之间共享 共享内存段 线程概念 线程的切换,可能引起进程的切换 同一进程或不同进程内的线程都可以并发执行 引入线程可提高程序并发执行的程度，可进一步提高系统效率 内核支持线程的切换都需要内核的支持 在用户空间实现线程，其最大的优点是什么？最大的缺点是什么？ 最大优点：效率。因为线程切换时，无须陷入内核。 最大缺点：一个线程被阻塞，整个进程被阻塞。 创建线程 在支持多线程的系统中，进程P创建的若干线程不能共享的是 进程P中某线程的栈指针 在同一进程的多线程之间,会被共享的有 堆 全局变量 进程状态模型(五状态)","categories":[{"name":"Operating-System-OS","slug":"Operating-System-OS","permalink":"http://example.com/categories/Operating-System-OS/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"第一部分_概论Part2","slug":"第一部分_概论Part2","date":"2023-04-24T11:40:53.000Z","updated":"2023-04-25T14:40:26.544Z","comments":true,"path":"2023/04/24/第一部分_概论Part2/","link":"","permalink":"http://example.com/2023/04/24/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E6%A6%82%E8%AE%BAPart2/","excerpt":"","text":"概念 多程序设计的目的 提高计算机资源利用率 分时系统设计的目的 提高交互性 Linux和Windows主要是用C语言来编写，有少数用于设备驱动的代码用汇编语言编写 对 多处理器系统共享物理内容 多核 非对称多处理器 对称多处理器 CPU有两种工作状态：内核态、用户态，其中属于特级权的是 内核态 管态 运行在内核态的程序是 设定计时器的值 缓冲区读写程序 中断服务程序 操作系统的主要部件或功能 处理机管理 内存管理 文件系统 输入输出管理 批处理系统、实时系统的特点 批处理系统为了提高计算机的利用率，开发者将程序、数据和其它信息一并提交给计算机中心，缺乏无交互性。 实时系统追求可靠性和即时性","categories":[{"name":"Operating-System-OS","slug":"Operating-System-OS","permalink":"http://example.com/categories/Operating-System-OS/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"第一部分_概论Part1","slug":"第一部分_概论Part1","date":"2023-04-24T02:18:43.000Z","updated":"2023-04-25T14:40:29.436Z","comments":true,"path":"2023/04/24/第一部分_概论Part1/","link":"","permalink":"http://example.com/2023/04/24/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E6%A6%82%E8%AE%BAPart1/","excerpt":"","text":"前导知识 内存是按 字节 编址 1KB = 1024B 硬盘是按 扇区 编址。 高级语言中int和float两种数据类型的变量占据的多大的内存 4B Cache地址映射方式中，现实中用的最多的是 组相连映射 Cache机制是基于程序执行的什么特点局部性原理 CPU中为什么要使用CACHE 内存速度慢 Intel CPU内存管理使用小端(Little Endian) 内存是CPU可直接寻址和访问的唯一大容量存储器 正确 没有操作系统(OS) 是可以的(操作系统只是方便使用计算机。) Linux中超级用户的名称是 root Linux中名称为“..“的文件是 父目录 Cache与内存的关系 比内存快 比内存小 二者的内容有关系，Cache是内存的内容的子集 属于内部中断 程序中除0 数组访问越界 调试程序中设置的断点 Window是 单用户 多任务 Linux中下列符号的含义： ~:家目录 &gt;:输出重定向 &lt;:输入重定向 | : | 左边的运行结果是 | 右边的输入条件或范围","categories":[{"name":"Operating-System-OS","slug":"Operating-System-OS","permalink":"http://example.com/categories/Operating-System-OS/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"Markdown格式测试","slug":"博客Markdown格式测试","date":"2023-04-10T03:05:27.000Z","updated":"2023-04-25T13:45:26.051Z","comments":true,"path":"2023/04/10/博客Markdown格式测试/","link":"","permalink":"http://example.com/2023/04/10/%E5%8D%9A%E5%AE%A2Markdown%E6%A0%BC%E5%BC%8F%E6%B5%8B%E8%AF%95/","excerpt":"这是为了测试Hexo Markdown的效果","text":"这是为了测试Hexo Markdown的效果 多级标题(共六种) “# 一级 “## 二级“### 三级“#### 四级“##### 五级“###### 六级 Tab缩进&amp;空格 &amp; emsp; //Tab&amp; nbsp; //空格 分割线用不少于三个的’-‘创建分割线; 代码引用#include &lt;iostream&gt; using namespace std; int main() &#123; printf(&quot;using &#96;&#96;&#96; start &#96;&#96;&#96; end to enter the code&quot;); &#125; return 0; 斜体在两个*之间填充内容即可 加粗在内容两侧放置两个** 无序列表 第一项 第二项 第三项 有序列表 第一项 第二项 第三项 区块 区块中使用列表 第一项 第二项 第三项 第一项 第二项 第三项 使用”&gt;”号实现 链接bilibili 在中括号内放置自定义名称,后接括号内放链接地址 图片 与链接方法相同 在最前段添加”!”即可 键盘按键显示使用 Ctrl+Alt+Del 重启电脑 仍待补充…","categories":[{"name":"Blog-Maintenance","slug":"Blog-Maintenance","permalink":"http://example.com/categories/Blog-Maintenance/"}],"tags":[{"name":"网页测试","slug":"网页测试","permalink":"http://example.com/tags/%E7%BD%91%E9%A1%B5%E6%B5%8B%E8%AF%95/"}]}],"categories":[{"name":"Operating-System-OS","slug":"Operating-System-OS","permalink":"http://example.com/categories/Operating-System-OS/"},{"name":"Blog-Maintenance","slug":"Blog-Maintenance","permalink":"http://example.com/categories/Blog-Maintenance/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"网页测试","slug":"网页测试","permalink":"http://example.com/tags/%E7%BD%91%E9%A1%B5%E6%B5%8B%E8%AF%95/"}]}